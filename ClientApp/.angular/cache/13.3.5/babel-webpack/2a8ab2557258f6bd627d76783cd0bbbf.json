{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\n/*const baseUrl = `${environment.apiUrl}/accounts`;*/\n\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http, apiUrl) {\n      this.router = router;\n      this.http = http;\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n      this.baseUrl = apiUrl + '//accounts';\n    }\n\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n\n    login(email, password) {\n      return this.http.post(this.baseUrl + '/authenticate', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n\n    logout() {\n      this.http.post(this.baseUrl + '/revoke-token', {}, {\n        withCredentials: true\n      }).subscribe();\n      this.stopRefreshTokenTimer();\n      this.accountSubject.next(null);\n      this.router.navigate(['/account/login']);\n    }\n\n    refreshToken() {\n      return this.http.post(this.baseUrl + '/refresh-token', {}, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n\n    register(account) {\n      return this.http.post(this.baseUrl + '/register', account);\n    }\n\n    verifyEmail(token) {\n      return this.http.post(this.baseUrl + '/verify-email', {\n        token\n      });\n    }\n\n    forgotPassword(email) {\n      return this.http.post(this.baseUrl + '/forgot-password', {\n        email\n      });\n    }\n\n    validateResetToken(token) {\n      return this.http.post(this.baseUrl + '/validate-reset-token', {\n        token\n      });\n    }\n\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(this.baseUrl + '/reset-password', {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n\n    getAll() {\n      return this.http.get(this.baseUrl);\n    }\n\n    getById(id) {\n      return this.http.get(this.baseUrl + `/${id}`);\n    }\n\n    create(params) {\n      return this.http.post(this.baseUrl, params);\n    }\n\n    update(id, params) {\n      return this.http.put(this.baseUrl + `/${id}`, params).pipe(map(account => {\n        // update the current account if it was updated\n        if (account.id === this.accountValue.id) {\n          // publish updated account to subscribers\n          account = Object.assign(Object.assign({}, this.accountValue), account);\n          this.accountSubject.next(account);\n        }\n\n        return account;\n      }));\n    }\n\n    delete(id) {\n      return this.http.delete(this.baseUrl + `/${id}`).pipe(finalize(() => {\n        // auto logout if the logged in account was deleted\n        if (id === this.accountValue.id) this.logout();\n      }));\n    }\n\n    startRefreshTokenTimer() {\n      // parse json object from base64 encoded jwt token\n      const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1])); // set a timeout to refresh the token a minute before it expires\n\n      const expires = new Date(jwtToken.exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 60 * 1000;\n      this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}